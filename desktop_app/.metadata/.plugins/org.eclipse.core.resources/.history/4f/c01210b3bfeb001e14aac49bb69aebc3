import javax.crypto.Cipher;
	import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
	
public class Encryption {
	
    public static String decrypt(String encryptedMessage, String privateKeyString) throws Exception {
        byte[] privateKeyBytes = Base64.getDecoder().decode(privateKeyString.getBytes());
        PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");

        PrivateKey privateKey= keyFactory.generatePrivate(privateKeySpec);

        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        return new String(cipher.doFinal(Base64.getDecoder().decode(encryptedMessage)), StandardCharsets.UTF_8);
    }
	    
	    public static String getKey() {	
	    	String encKey = "fU2rkfiUGdn/04uHn89oMQwAzT7IqLAj33b0HzWxNt4pF7rUZGtUqKzTwn52/vNR4TGBw/Q3C9wuKHGPN4qfFok9cvihCyjbligw9np3qs0gZK1SLS2vvJLq9WTx6fFg16jaZsFl6my3yKsGHYIxX1Jg+jTSDUyR107mV7xVrVhEH3I93mfwr63IJkOpAT7qBUE0hKqwzys+BKG49n7ts+i7vntEqMGGezRqon+Z38xHowHAkH0Xp3WoLs6qsXRfTRqfYJS7QtxG8KiUrpwSsAwqAm+WK2E7BfawVGqQA5yulFoXM9SB74WyljZsLX45ifIdy33MYCoIsN1IcPm6rg==";
	    	return encKey;
	    }
	    
	    //https://github.com/tigerlyb/Steganography-in-Java 
		
		// extract secret information/Text from a "cover image"
		public static String extractText(BufferedImage image, int length) {
			System.out.print("Extracting: ");
			int bitMask = 0x00000001;	// define the mask bit used to get the digit
			int x = 0;					// define the starting pixel x
			int y = 0;					// define the starting pixel y
			int flag;
			//char[] c = new char[length] ;	// define a character array to store the secret information
			String text = "";
			for(int i = 0; i < length; i++) {	
				int bit = 0;
				
				// 8 digits form a character
				for(int j = 0; j < 8; j++) {				
					if(x < image.getWidth()) {
						flag = image.getRGB(x, y) & bitMask;	// get the last digit of the pixel
						x++;
					}
					else {
						x = 0;
						y++;
						flag = image.getRGB(x, y) & bitMask;	// get the last digit of the pixel
					}
					
					// store the extracted digits into an integer as a ASCII number
					if(flag == 1) {					
						bit = bit >> 1;	
						bit = bit | 0x80;
					} 
					else {					
						bit = bit >> 1;
					}				
				}
				char c = (char) bit;	// represent the ASCII number by characters
				text += c;
			}
			return text;
		}
}
